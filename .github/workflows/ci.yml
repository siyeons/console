name: CI

on:
  push:
    branches:
      - ci-test
jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set environment virables
      run: |
        echo "::set-env name=SERVICE::console"
        echo "::set-env name=IMAGE_PREFIX::spaceone"

        echo "::set-env name=DOCKER_UPLOAD::true"
        echo "::set-env name=PYPI_UPLOAD::false"
        echo "::set-env name=LOCATION_DOCKERFILE::."
        echo "::set-env name=LOCATION_SETUP_PY::src"

        echo "::set-env name=SUDO::false"
        version=$(cat src/VERSION)${{ github.run_id }}
        echo "::set-env name=VERSION::$version"

    - name: Configure integration
      run: |
        echo "Configuring integrations ... None"

    - name: Build
      id: build
      if: env.PYPI_UPLOAD == 'true'
      run: |
        echo "Building pypi ..."
        cd $LOCATION_SETUP_PY
        python3 setup.py bdist_wheel

    - name: Test
      id: test
      run: |
        echo "Running test ... None"
        # fail test or pass test

    - name: Upload pypi
      id: upload_pypi
      if: ${{ steps.test.outcome == 'success' && env.PYPI_UPLOAD == 'true' }}
      run: |
        echo "Uploading pypi ..."
        cd $LOCATION_SETUP_PY
        twine upload dist/*.whl --username ${{ secrets.PYPI_USERNAME }} --password ${{ secrets.PYPI_PASSWORD }} --verbose

    - name: Upload docker
      if: ${{ always() && steps.test.conclusion == 'success' && env.DOCKER_UPLOAD == 'true' }}
      uses: elgohr/Publish-Docker-Github-Action@master
      with:
        name: ${{ env.IMAGE_PREFIX }}/${{ env.SERVICE }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        workdir: ${{ env.LOCATION_DOCKERFILE }}
        tags: latest,${{ env.VERSION }}

    - name: Push to a branch
      if: ${{ always() && steps.test.conclusion == 'success' }}
      run: |
        echo "Pusing to a branch ... None"

    - name: Deploy by spinnaker
      id: deploy_spinnaker
      if: always() && steps.test.outcome == 'success' && env.DOCKER_UPLOAD
      run: |
        echo "Deploy to spinnaker. it will listen DockerHub"